substitutions:
  device_name: "Kitchen"
  device_ip: 192.168.1.65
  
  <<: !include secrets.yaml

esphome:
  name: kitchen
  platform: ESP32
  board: nodemcu-32s

status_led:
  pin: GPIO2

wifi:
  ssid: $wifi_ssid
  password: !secret wifi_password
  domain: !secret network_domain

  manual_ip:
    static_ip: $device_ip
    gateway: !secret network_gateway
    subnet: !secret network_mask

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_name} Fallback Hotspot"
    password: !secret ota_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret ota_password

ota:
  password: !secret ota_password

web_server:
  port: 80
  auth:
    username: admin
    password: !secret web_server_password

i2c:
  - id: bus_indoor
    sda: 21
    scl: 22
    scan: True
  - id: bus_outdoor
    sda: 19
    scl: 23
    scan: True

globals:
  - id: iaq_index
    type: int
    restore_value: no
    initial_value: '0'

binary_sensor:
  - platform: gpio
    pin: 18
    name: "${device_name} Motion"
    device_class: motion

sensor:
  - platform: uptime
    name: "${device_name} Uptime"
    id: device_uptime

  # Outdoor sensors ####################################################

  - platform: htu21d
    i2c_id: bus_outdoor
    # address: 0x40
    update_interval: 60s
    temperature:
      name: "Outdoor Temperature"
      id: outdoor_temp
    humidity:
      name: "Outdoor Humidity"
      id: outdoor_humi

  # - platform: bmp085
  #   i2c_id: bus_outdoor
  #   address: 0x77
  #   update_interval: 60s
  #   # temperature:
  #   #   name: "Outdoor Temperature"
  #   pressure:
  #     name: "Outdoor Pressure"

  - platform: bh1750
    i2c_id: bus_outdoor
    address: 0x23
    update_interval: 60s
    name: "Outdoor Illuminance"

  # Indoor sensors ####################################################

  - platform: bmp280
    i2c_id: bus_indoor
    address: 0x76
    update_interval: 60s
    temperature:
      name: "${device_name} Temperature"
      oversampling: 16x
      id: indoor_temp
    pressure:
      name: "Pressure"
      on_value:
        then:
          - sensor.template.publish:
              id: pressure_mmhg
              state: !lambda 'return x / 1.33322;'

  - platform: template
    name: "Pressure mmHg"
    id: pressure_mmhg
    unit_of_measurement: mmHg
    icon: mdi:gauge

  # - platform: hdc1080
  #   i2c_id: bus_indoor
  #   # address: 0x40
  #   update_interval: 60s
  #   humidity:
  #     name: "${device_name} Humidity"
  #     id: indoor_humi

  - platform: ccs811
    i2c_id: bus_indoor
    address: 0x5A
    update_interval: 60s
    temperature: indoor_temp
    # humidity: indoor_humi
    # baseline: 
    eco2:
      name: "${device_name} eCO2"
      id: indoor_eco2
      filters:
        - lambda: |-
            if (x > 400 && x < 65000) {
              return x;
            } else {
              return {};
            }
    tvoc:
      name: "${device_name} tVOC"
      id: indoor_tvoc
      filters:
        - lambda: |-
            if (x > 0 && x < 65000) {
              return x;
            } else {
              return {};
            }

  - platform: template
    name: "${device_name} IAQ Index"
    accuracy_decimals: 0
    update_interval: 60s
    icon: "mdi:air-filter"
      # /*
      # * Transform indoor humidity values to IAQ points according to Indoor Air Quality UK: 
      # * http://www.iaquk.org.uk/
      # */
      # if (id(indoor_humi).state < 10 or id(indoor_humi).state > 90) {
      #   id(iaq_index) += 1;
      # }
      # else if (id(indoor_humi).state < 20 or id(indoor_humi).state > 80) {
      #   id(iaq_index) += 2;
      # }
      # else if (id(indoor_humi).state < 30 or id(indoor_humi).state > 70) {
      #   id(iaq_index) += 3;
      # }
      # else if (id(indoor_humi).state < 40 or id(indoor_humi).state > 60) {
      #   id(iaq_index) += 4;
      # }
      # else if (id(indoor_humi).state >= 40 and id(indoor_humi).state <= 60) {
      #   id(iaq_index) += 5;
      # }
    lambda: |-
      int num_sensors = 0;
      id(iaq_index) = 0;

      /*
       * Transform indoor temperature values to IAQ points according to Indoor Air Quality UK: 
       * http://www.iaquk.org.uk/
       */
      if (!isnan(id(indoor_temp).state)) {
        num_sensors++;
        if (id(indoor_temp).state >= 18 and id(indoor_temp).state <= 21) {
          id(iaq_index) += 5;
        }
        else if (id(indoor_temp).state > 16 or id(indoor_temp).state < 23) {
          id(iaq_index) += 4;
        }
        else if (id(indoor_temp).state > 15 or id(indoor_temp).state < 24) {
          id(iaq_index) += 3;
        }
        else if (id(indoor_temp).state > 14 or id(indoor_temp).state < 25) {
          id(iaq_index) += 2;
        }
        else if (id(indoor_temp).state <= 14 or id(indoor_temp).state >= 25) {
          id(iaq_index) += 1;
        }
      }

      /*
       * Transform eCO2 values to IAQ points according to Indoor Air Quality UK: 
       * http://www.iaquk.org.uk/
       */
      if (!isnan(id(indoor_eco2).state)) {
        num_sensors++;
        if (id(indoor_eco2).state <= 600) {
          id(iaq_index) += 5;
        }
        else if (id(indoor_eco2).state <= 800) {
          id(iaq_index) += 4;
        }
        else if (id(indoor_eco2).state <= 1500) {
          id(iaq_index) += 3;
        }
        else if (id(indoor_eco2).state <= 1800) {
          id(iaq_index) += 2;
        }
        else if (id(indoor_eco2).state > 1800) {
          id(iaq_index) += 1;
        }
      }
      
      /*
       * Transform TVOC values to IAQ points according to German environmental guidelines: 
       * https://www.repcomsrl.com/wp-content/uploads/2017/06/Environmental_Sensing_VOC_Product_Brochure_EN.pdf
       */
      if (!isnan(id(indoor_tvoc).state)) {
        num_sensors++;
        if (id(indoor_tvoc).state <= 65) {
          id(iaq_index) += 5;
        }
        else if (id(indoor_tvoc).state <= 220) {
          id(iaq_index) += 4;
        }
        else if (id(indoor_tvoc).state <= 660) {
          id(iaq_index) += 3;
        }
        else if (id(indoor_tvoc).state <= 2200) {
          id(iaq_index) += 2;
        }
        else if (id(indoor_tvoc).state > 2200) {
          id(iaq_index) += 1;
        }
      }

      if (num_sensors != 0) {
        id(iaq_index) = id(iaq_index) * 13 / num_sensors;
        ESP_LOGD("main", "Current IAQ index %d (%d sensors)", id(iaq_index), num_sensors);
        return id(iaq_index);
      }
      return {};
    on_value:
        then:
          - text_sensor.template.publish:
              id: iaq_level
              state: !lambda |-
                /*
                * Transform IAQ index to human readable text according to Indoor Air Quality UK: 
                * http://www.iaquk.org.uk/
                */
                if (id(iaq_index) <= 25) {
                  return {"Inadequate"};
                }
                else if (id(iaq_index) <= 38) {
                  return {"Poor"};
                }
                else if (id(iaq_index) <= 51) {
                  return {"Fair"};
                }
                else if (id(iaq_index) <= 60) {
                  return {"Good"};
                }
                else if (id(iaq_index) > 60) {
                  return {"Excellent"};
                }
                return {};

text_sensor:
  - platform: template
    name: "${device_name} IAQ Level"
    icon: "mdi:air-filter"
    id: iaq_level
