homeassistant:
  customize:
    sensor.cpu_temperature:
      templates:
        hs_color: >-
          if (state > 80) return [0, 85];
          else if (state > 60) return [40, 70];
          else return [0, 0];

sensor:
  - platform: version
  - platform: version
    name: available_version
    source: hassio
  - platform: uptime
    name: Uptime
    unit_of_measurement: minutes
    
  - platform: systemmonitor
    resources:
      - type: last_boot
      - type: processor_use
      - type: load_1m
      - type: load_5m
      - type: load_15m
      - type: memory_use_percent
      - type: memory_free
      - type: swap_use
      - type: disk_use_percent
        arg: /
      - type: disk_use
        arg: /

  - platform: command_line
    name: "CPU Temperature"
    command: "cat /sys/class/thermal/thermal_zone0/temp"
    unit_of_measurement: "Â°C"
    value_template: '{{ ( value | multiply(0.001) ) | round(1) }}'

  - platform: template
    sensors:
      hassio_cpu_alert_level:
        value_template: >-
          {{ (states("sensor.processor_use")|int > 100)|int
           + (states("sensor.processor_use")|int > 300)|int }}
      hassio_memory_alert_level:
        value_template: >-
          {{ (states("sensor.memory_use_percent")|int > 70)|int }}
      hassio_disks_alert_level:
        value_template: >-
          {{ (states("sensor.disk_use_percent")|int >= 75)|int
           + (states("sensor.disk_use_percent")|int >= 90)|int }}
      hassio_alert_level:
        value_template: >-
          {{ [
            states("sensor.hassio_cpu_alert_level"),
            states("sensor.hassio_memory_alert_level"),
            states("sensor.hassio_disks_alert_level"),
          ]|max }}

rest_command:
  google_backup:
    url: 'http://localhost:8055/gb/doBackup'
    timeout: '300'

automation:
  - alias: '[System] Hass Started'
    initial_state: 'on'
    trigger:
      platform: homeassistant
      event: start
    action:
      - service: frontend.set_theme
        data:
          name: midnight
      - service: notify.hass_info
        data:
          message: "Hass.io Online"

  - alias: '[System] Hass Stopped'
    initial_state: 'on'
    trigger:
      platform: homeassistant
      event: shutdown
    action:
      - service: notify.hass_info
        data:
          message: "Hass.io Offline"

  - alias: '[System] Hass New Device Tracked'
    initial_state: 'on'
    trigger:
      platform: event
      event_type: device_tracker_new_device
    action:
      - service: notify.hass_info
        data_template:
          message: >-
            New Device Tracked: {{trigger.event.data.host_name}} ({{trigger.event.data.entity_id}})

  - alias: '[System] Hass Updater'
    initial_state: 'on'
    trigger:
      - platform: state
        entity_id: sensor.available_version
    condition:
      - condition: template
        value_template: "{{ states('sensor.available_version') != states('sensor.current_version') }}"
    action:
      - service: notify.hass_info
        data_template:
          title: Upgrade time!
          message: >-
            Hass.io version {{ states('sensor.available_version') }} is now available!

  - alias: '[System] Weekly Backup Monday at 5:00'
    initial_state: 'on'
    trigger:
      platform: time
      at: '05:00'
    condition:
      - condition: time
        weekday:
          - mon
    action:
      - service: hassio.snapshot_full
        data_template:
          name: "Automated Snapshot {{ now().strftime('%F') }}"
      - service: notify.hass_info
        data_template:
          message: "Automated Snapshot {{ now().strftime('%F') }}"

  - alias: '[System] Weekly Backup Monday to Google at 5:30'
    initial_state: 'on'
    trigger:
      - platform: time
        at: '05:30'
    condition:
      - condition: time
        weekday:
          - mon
    action:
      - service: rest_command.google_backup
      - service: notify.hass_info
        data:
          message: "Automatic snapshot uploaded"
